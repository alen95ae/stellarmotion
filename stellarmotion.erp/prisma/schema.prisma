generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  OPERATOR
}

enum ResStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum ContactKind {
  INDIVIDUAL
  COMPANY
}

enum ContactRelation {
  CUSTOMER
  SUPPLIER
  BOTH
}

enum SupportStatus {
  DISPONIBLE
  OCUPADO
  RESERVADO
  NO_DISPONIBLE
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  role      Role      @default(OPERATOR)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contacts  Contact[]
}

model Company {
  id        String    @id @default(cuid())
  name      String
  taxId     String?   @unique
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  clients   Client[]
  supports  Support[]
}

model Client {
  id        String        @id @default(cuid())
  name      String
  email     String?
  phone     String?
  companyId String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  company   Company?      @relation(fields: [companyId], references: [id])
  bookings  Reservation[]
}

model Support {
  id                     String        @id @default(cuid())
  code                   String        @unique
  slug                   String?       @unique // Para URLs amigables (web pública)
  title                  String
  type                   String
  widthM                 Float?
  heightM                Float?
  latitude               Float?
  longitude              Float?
  address                String?
  city                   String?
  country                String?
  priceMonth             Float?
  available              Boolean       @default(true)
  status                 SupportStatus @default(DISPONIBLE)
  areaM2                 Float?
  pricePerM2             Float?
  productionCost         Float?
  productionCostOverride Boolean       @default(false)
  owner                  String?
  imageUrl               String? // URL pública de la imagen del soporte
  companyId              String?
  
  // Campos adicionales para web pública (compatibilidad con Product)
  dimensions             String?       // Dimensiones como string (ej: "3x4m")
  dailyImpressions       Int?          // Impresiones diarias estimadas
  lighting               Boolean       @default(false) // Si tiene iluminación
  tags                   String?       // Tags separados por comas
  images                 String?       // URLs de imágenes adicionales (JSON array)
  shortDescription       String?       // Descripción corta
  description            String?       // Descripción completa
  featured               Boolean       @default(false) // Si está destacado
  rating                 Float?        // Calificación promedio
  reviewsCount           Int?          @default(0) // Número de reseñas
  printingCost           Float?        // Costo de impresión
  categoryId             String?       // ID de categoría (para web pública)
  
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  bookings               Reservation[]
  company                Company?      @relation(fields: [companyId], references: [id])
  category               Category?     @relation(fields: [categoryId], references: [id])
}

model Reservation {
  id        String    @id @default(cuid())
  supportId String
  clientId  String
  startDate DateTime
  endDate   DateTime
  status    ResStatus @default(PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  client    Client    @relation(fields: [clientId], references: [id])
  support   Support   @relation(fields: [supportId], references: [id])
}

model Contact {
  id           String                @id @default(cuid())
  kind         ContactKind           @default(COMPANY)
  relation     ContactRelation       @default(CUSTOMER)
  displayName  String
  legalName    String?
  taxId        String?
  phone        String?
  email        String?
  website      String?
  address1     String?
  address2     String?
  city         String?
  state        String?
  postalCode   String?
  country      String?
  salesOwnerId String?
  favorite     Boolean               @default(false)
  isActive     Boolean               @default(true)
  notes        String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  salesOwner   User?                 @relation(fields: [salesOwnerId], references: [id])
  tags         ContactTagOnContact[]
}

model ContactTag {
  id       String                @id @default(cuid())
  name     String                @unique
  color    String?
  contacts ContactTagOnContact[]
}

model ContactTagOnContact {
  contactId String
  tagId     String
  tag       ContactTag @relation(fields: [tagId], references: [id])
  contact   Contact    @relation(fields: [contactId], references: [id])

  @@id([contactId, tagId])
}

// Modelo Category para web pública (compatibilidad con stellarmotion.io)
model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  label     String
  iconKey   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  supports  Support[] // Relación con soportes
}
