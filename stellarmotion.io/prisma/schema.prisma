generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  label     String
  iconKey   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id               String        @id @default(cuid())
  slug             String        @unique
  title            String
  city             String
  country          String
  dimensions       String
  dailyImpressions Int
  type             String
  lighting         Boolean
  tags             String
  images           String
  shortDescription String        @default("")
  description      String        @default("")
  featured         Boolean       @default(false)
  lat              Float
  lng              Float
  pricePerMonth    Int
  printingCost     Int
  rating           Float?
  reviewsCount     Int?
  categoryId       String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  category         Category      @relation(fields: [categoryId], references: [id])
  reservations     Reservation[]
  maintenanceTickets MaintenanceTicket[]
  invoices         Invoice[]
}

model Client {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  phone        String?
  company      String?
  address      String?
  taxId        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]
  invoices     Invoice[]
}

model Reservation {
  id          String            @id @default(cuid())
  clientId    String
  productId   String
  startDate   DateTime
  endDate     DateTime
  totalAmount Int
  status      ReservationStatus @default(PENDING)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  client      Client            @relation(fields: [clientId], references: [id])
  product     Product           @relation(fields: [productId], references: [id])
  invoices    Invoice[]
}

model Invoice {
  id            String        @id @default(cuid())
  number        String        @unique
  clientId      String
  reservationId String?
  productId     String?
  amount        Int
  tax           Int           @default(0)
  totalAmount   Int
  status        InvoiceStatus @default(PENDING)
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  paidDate      DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  client        Client        @relation(fields: [clientId], references: [id])
  reservation   Reservation?  @relation(fields: [reservationId], references: [id])
  product       Product?      @relation(fields: [productId], references: [id])
}

model MaintenanceTicket {
  id          String            @id @default(cuid())
  productId   String
  title       String
  description String
  status      MaintenanceStatus @default(PENDING)
  priority    Priority          @default(MEDIUM)
  assignedTo  String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  resolvedAt  DateTime?
  product     Product           @relation(fields: [productId], references: [id])
}

model Message {
  id        String      @id @default(cuid())
  type      MessageType
  title     String
  content   String
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageType {
  RESERVATION
  INVOICE
  MAINTENANCE
  SYSTEM
}
